{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2343,"sourceType":"datasetVersion","datasetId":1012}],"dockerImageVersionId":30558,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-16T18:32:28.756599Z","iopub.execute_input":"2024-06-16T18:32:28.757811Z","iopub.status.idle":"2024-06-16T18:32:29.260703Z","shell.execute_reply.started":"2024-06-16T18:32:28.757763Z","shell.execute_reply":"2024-06-16T18:32:29.259181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install pydicom","metadata":{"execution":{"iopub.status.busy":"2024-06-16T18:32:29.263289Z","iopub.execute_input":"2024-06-16T18:32:29.263968Z","iopub.status.idle":"2024-06-16T18:33:05.984740Z","shell.execute_reply.started":"2024-06-16T18:32:29.263923Z","shell.execute_reply":"2024-06-16T18:33:05.982929Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Load the CSV file\ndf = pd.read_csv('/kaggle/input/siim-medical-images/overview.csv')\n\n# Print the column names to check for 'image_filename'\nprint(df.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-16T18:33:05.986774Z","iopub.execute_input":"2024-06-16T18:33:05.987191Z","iopub.status.idle":"2024-06-16T18:33:06.015895Z","shell.execute_reply.started":"2024-06-16T18:33:05.987151Z","shell.execute_reply":"2024-06-16T18:33:06.014564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport pydicom \n\n# Load the dataset\ndata_dir = '/kaggle/input/siim-medical-images'\ndf = pd.read_csv(os.path.join(data_dir, 'overview.csv'))\n\n# Preprocess the labels\ny_contrast = LabelEncoder().fit_transform(df['Contrast'])\ny_age = df['Age']\n\n# Load and preprocess images\nimage_data = []\ndicom_image_folder = os.path.join(data_dir, 'dicom_dir')\n\nfor filename in df['dicom_name']:\n    image_path = os.path.join(dicom_image_folder, filename)\n\n    if os.path.exists(image_path):\n        dicom_data = pydicom.dcmread(image_path)\n        image = dicom_data.pixel_array\n        image = tf.image.convert_image_dtype(image, tf.float32)\n\n        # Add channel dimension for single-channel images\n        image = tf.expand_dims(image, axis=-1)\n\n        # Resize the image to (224, 224)\n        image = tf.image.resize(image, (224, 224))\n\n        image_data.append(image)\n    else:\n        print(f\"File not found: {image_path}\")\n\n\nX = np.array(image_data)\n\n# Split the data into training and testing sets\nX_train, X_test, y_contrast_train, y_contrast_test, y_age_train, y_age_test = train_test_split(\n    X, y_contrast, y_age, test_size=0.2, random_state=42)\n\n# Build a CNN model for contrast prediction\nmodel_contrast = keras.Sequential([\n    layers.Input(shape=(224, 224, 1)),\n    layers.Conv2D(32, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(2, activation='softmax')  # 2 classes: with and without contrast\n])\n\n# Compile the model for contrast prediction\nmodel_contrast.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model for contrast prediction\nhistory_contrast = model_contrast.fit(X_train, y_contrast_train, epochs=10, validation_split=0.2)\nmodel_contrast.fit(X_train, y_contrast_train, epochs=10, validation_split=0.2)\n# Build a CNN model for age prediction\nmodel_age = keras.Sequential([\n    layers.Input(shape=(224, 224, 1)),\n    layers.Conv2D(32, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1)  # Regression for age prediction\n])\n\n# Compile the model for age prediction\nmodel_age.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n\n# Train the model for age prediction\nhistory_age = model_age.fit(X_train, y_age_train, epochs=10, validation_split=0.2)\nmodel_age.fit(X_train, y_age_train, epochs=10, validation_split=0.2)\n\n# Predict contrast usage on the test set\ny_contrast_pred = model_contrast.predict(X_test)\n\n# Predict age on the test set\ny_age_pred = model_age.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-16T18:33:06.018722Z","iopub.execute_input":"2024-06-16T18:33:06.019214Z","iopub.status.idle":"2024-06-16T18:36:05.402278Z","shell.execute_reply.started":"2024-06-16T18:33:06.019167Z","shell.execute_reply":"2024-06-16T18:36:05.400941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.utils import plot_model\n\n# Generate and save the model architecture diagram\nplot_model(model_contrast, to_file='model_contrast.png', show_shapes=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-16T19:03:30.491841Z","iopub.execute_input":"2024-06-16T19:03:30.492272Z","iopub.status.idle":"2024-06-16T19:03:30.884936Z","shell.execute_reply.started":"2024-06-16T19:03:30.492240Z","shell.execute_reply":"2024-06-16T19:03:30.883631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Collect training history\nhistory = model_contrast.fit(X_train, y_contrast_train, epochs=10, validation_split=0.2)\n\n# Plot training and validation loss\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Model Training Curves')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-16T19:03:42.838884Z","iopub.execute_input":"2024-06-16T19:03:42.839282Z","iopub.status.idle":"2024-06-16T19:04:24.230058Z","shell.execute_reply.started":"2024-06-16T19:03:42.839250Z","shell.execute_reply":"2024-06-16T19:04:24.228584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import random\nimport matplotlib.pyplot as plt\n\n# Select a random sample from the test data\nsample_index = random.randint(0, len(X_test))\nsample_image = X_test[sample_index]\nsample_ground_truth = y_contrast_test[sample_index]\n\n# Get the model's prediction for this sample\nsample_prediction = model_contrast.predict(sample_image.reshape(1, 224, 224, 1))\n\n# Define class labels\nclass_labels = ['Without Contrast', 'With Contrast']\n\n# Create a bar chart to visualize the model's predictions\nplt.figure(figsize=(8, 6))\nplt.bar(class_labels, sample_prediction[0])\nplt.title('Model Predictions for Contrast')\nplt.xlabel('Contrast')\nplt.ylabel('Prediction Probability')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-16T19:05:10.457778Z","iopub.execute_input":"2024-06-16T19:05:10.459337Z","iopub.status.idle":"2024-06-16T19:05:10.752855Z","shell.execute_reply.started":"2024-06-16T19:05:10.459286Z","shell.execute_reply":"2024-06-16T19:05:10.751421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Convert the numeric labels in y_contrast_test to strings\ny_contrast_test = [str(label) for label in y_contrast_test]\n\n# Create a confusion matrix and classification report\nplt.figure(figsize=(8, 6))\nsns.heatmap(confusion_matrix(y_contrast_test, y_pred_labels), annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix for Contrast Prediction')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n\n# Create a classification report\nprint(classification_report(y_contrast_test, y_pred_labels))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-16T19:06:00.448936Z","iopub.execute_input":"2024-06-16T19:06:00.449338Z","iopub.status.idle":"2024-06-16T19:06:00.821822Z","shell.execute_reply.started":"2024-06-16T19:06:00.449309Z","shell.execute_reply":"2024-06-16T19:06:00.820529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}